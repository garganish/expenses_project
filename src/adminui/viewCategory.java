
package adminui;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import model.dao.categoryinfoDao;
import model.to.categoryinfoTo;
import utility.operations;

public class viewCategory extends javax.swing.JInternalFrame {

   
    private List<categoryinfoTo> category;
    private JPopupMenu popup;
    private int srow;//this variable represent the selected row.
    
    public viewCategory() {
        initComponents();
        bindTables();
        srow=-1;
        popup = new JPopupMenu();
        JMenuItem deleteitem = new JMenuItem("Delete Record");
        deleteitem.setFont(new Font("Arial", Font.BOLD, 20));
        JMenuItem edititem = new JMenuItem("Edit Record");
        edititem.setFont(new Font("Arial", Font.BOLD, 20  ));
        try {
            ImageIcon icon;
            icon = new ImageIcon(getClass().getResource("/adminui/delete.png"));
            deleteitem.setIcon(icon);
        } catch (Exception ex) {
        }
        try {
            ImageIcon icon;
            icon = new ImageIcon(getClass().getResource("/adminui/edit.png"));
            edititem.setIcon(icon);
        } catch (Exception ex) {
        }
        popup.add(deleteitem);
        popup.add(edititem);
        deleteitem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteRecord();
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
         edititem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editRecord();
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }
    private void deleteRecord()
    {
        if(srow!=-1 && category!=null && srow<category.size())
        {
             int result = JOptionPane.showConfirmDialog(this, "Are You Sure To Removed This Reccord?", "Message From System", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                categoryinfoTo ct = category.get(srow);
                categoryinfoDao action = new categoryinfoDao();
                String message = "";
                if (action.deleteRecord(ct.getCategoryid())) {
                    message = "Record is Removed From Database";
                    bindTables();
                } else {
                    message = "Record does not Remove From Database Due To : " + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        srow=-1;
    }
    private void editRecord()
    {
        if(srow!=-1 && category!=null && srow<category.size())
        {
            categoryinfoTo ct = category.get(srow);
            
            operations.openInternalFrame(getDesktopPane(), new addCategory(ct));
            dispose();
        }
    }
     public void bindTables()
     {
         String[] col_list={"Categoryid","Categoryname"};
         category=new categoryinfoDao().getAllRecord();
         Object[][] records=null;
         if(category!=null &&category.size()>0)
         {
             // to allocae the memory of the records
             records=new Object[category.size()][col_list.length];
             int i=0;
             for(categoryinfoTo cc: category)
             {
                records[i]=new Object[]{cc.getCategoryid(),cc.getCategoryname()};
                i++;
             }
         }
         else
         {
             records=new Object[1][col_list.length];
             records[0]=new Object[]{"no records","no records"};
         }
         DefaultTableModel modal=new DefaultTableModel(records,col_list);
         tablecategory.setModel(modal);
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablecategory = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("View Category Details");

        tablecategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablecategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecategoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablecategory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 783, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 90, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 151, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablecategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablecategoryMouseClicked
        // TODO add your handling code here:
        if(evt.getButton()==MouseEvent.BUTTON3)//Button3 is for mouse right click
        {
            int point = tablecategory.rowAtPoint(evt.getPoint());//givw at what point click occurs
            tablecategory.getSelectionModel().setSelectionInterval(point, point);// it will hightlight the column on which u wull do right click.
            srow=tablecategory.getSelectedRow();
            popup.show(tablecategory,getX(),getY());
            
            
        }
    }//GEN-LAST:event_tablecategoryMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablecategory;
    // End of variables declaration//GEN-END:variables
}
